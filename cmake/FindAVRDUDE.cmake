#[=======================================================================[.rst:
FindAVRDUDE
-----------

Find ``avrdude`` executable and provide a macro to upload the firmware.

The module defines the following variables:

``AVRDUDE_FOUND``
  True if the `avrdude` executable was found.

``AVRDUDE_EXECUTABLE``
  The path to the ``avrdude`` program.

``AVRDUDE_VERSION``
  The version of the ``avrdude`` program.

If ``avrdude`` is found, the module will provide a macro to upload the firmware.

.. command:: avrdude_target

  .. code-block:: cmake

    avrdude_target(<name>
        TARGET <target>
        MCU <string>
        PROGRAMMER <string>
        [PORT <port>]
        [BAUDRATE <string>]
        [LFUSE <string>]
        [HFUSE <string>]
        [EFUSE <string>]
        [VERBOSE]
        [REPORT_FILE <file>]
    )

``Name``
  The name of the upload target.

``TARGET <target>``
  The target to upload, typically a hex file generated by the build process.

``MCU <mcu>``
  The microcontroller unit (MCU) type to which the firmware will be uploaded.

``PROGRAMMER <programmer>``
  The programmer type to use for uploading the firmware.

``PORT <port>``
  The serial port to which the programmer is connected (optional).

``BAUDRATE <string>``
  The baud rate for the connection.

``LFUSE <string>``
  The low fuse bits to program.

``HFUSE <string>``
  The high fuse bits to program.

``EFUSE <string>``
  The extended fuse bits to program.

``VERBOSE``
  If specified, `avrdude` will be run in verbose mode.

``REPORT_FILE <file>``
  The file to which the output of `avrdude` will be written.

The macro defines the following variables:

``AVRDUDE_<Name>_DEFINED``
  True if the macro run successfully.

``AVRDUDE_<Name>_INPUT``
  The input file to upload.

Examples
^^^^^^^^

.. code-block::

  find_package(AVRDUDE)
  if (AVRDUDE_FOUND)
    avrdude_target(upload_firmware
      TARGET firmware.hex
      MCU atmega328p
      PROGRAMMER arduino
      PORT /dev/ttyUSB0
      BAUDRATE 115200
      LFUSE 0xFF
      HFUSE 0xD9
      EFUSE 0xFF
      VERBOSE
      REPORT_FILE upload_report.txt
    )
  endif()
#]=======================================================================]

find_program(
    AVRDUDE_EXECUTABLE 
    NAMES 
        avrdude
    PATHS 
        ENV AVRDUDE_PATH
        C:/tools/avrdude
        C:/tools/avrdude-v8.1
        C:/tools/avrdude-v8.0
        C:/tools/avrdude-v7.0
        C:/tools/avrdude-v6.3
        C:/tools/avrdude-v6.2
        C:/tools/avrdude-v6.1
        C:/tools/avrdude-v6.0
        C:/tools/avrdude-v5.11
        C:/tools/avrdude-v5.10
        /usr/local/bin 
        /usr/bin
    DOC "Path to the AVRDUDE executable"
)
mark_as_advanced(AVRDUDE_EXECUTABLE)

if(AVRDUDE_EXECUTABLE)

    message(STATUS "Found AVRDUDE: ${AVRDUDE_EXECUTABLE}")
    execute_process(
        COMMAND ${AVRDUDE_EXECUTABLE} --version
        OUTPUT_VARIABLE _AVRDUDE_OUT
        ERROR_VARIABLE _AVRDUDE_ERR
        RESULT_VARIABLE _AVRDUDE_RES
        OUTPUT_STRIP_TRAILING_WHITESPACE
        ERROR_STRIP_TRAILING_WHITESPACE
    )
    if(_AVRDUDE_RES EQUAL 0)
        # Extract plain version number (e.g. 7.0 or 6.3)
        if("${_AVRDUDE_OUT}" MATCHES ".*([0-9]+(\\.[0-9]+)+)")
            set(AVRDUDE_VERSION "${CMAKE_MATCH_1}")
            message(STATUS "AVRDUDE version: ${AVRDUDE_VERSION}")
        else()
            message(WARNING "Could not parse AVRDUDE version from: ${_AVRDUDE_OUT}")
        endif()
    else()
        message(WARNING "Failed to get AVRDUDE version: ${_AVRDUDE_ERR}")
    endif()

    #============================================================
    # AVRDUDE_UPLOAD (public macro)
    #============================================================
    macro(avrdude_upload name)

        # Parsing parameters
        set(AVRDUDE_UPLOAD_PARAM_OPTIONS 
            VERBOSE
        )
        set(AVRDUDE_UPLOAD_PARAM_ONE_VALUE_KEYWORDS
            TARGET
            MCU
            PROGRAMMER
            PORT
            BAUDRATE
            LFUSE
            HFUSE
            EFUSE
            REPORT_FILE
        )
        set(AVRDUDE_UPLOAD_PARAM_MULTI_VALUE_KEYWORDS)

        cmake_parse_arguments(
            AVRDUDE_UPLOAD
            "${AVRDUDE_UPLOAD_PARAM_OPTIONS}"
            "${AVRDUDE_UPLOAD_PARAM_ONE_VALUE_KEYWORDS}"
            "${AVRDUDE_UPLOAD_PARAM_MULTI_VALUE_KEYWORDS}"
            ${ARGN}
        )

        if(NOT "${AVRDUDE_UPLOAD_UNPARSED_ARGUMENTS}" STREQUAL "")
            message(SEND_ERROR "Usage")
        endif()

        if(NOT AVRDUDE_UPLOAD_TARGET)
            message(FATAL_ERROR "AVRDUDE_UPLOAD: TARGET is required")
        endif()
        if(NOT AVRDUDE_UPLOAD_MCU)
            message(FATAL_ERROR "AVRDUDE_UPLOAD: MCU is required")
        endif()
        if(NOT AVRDUDE_UPLOAD_PROGRAMMER)
            message(FATAL_ERROR "AVRDUDE_UPLOAD: PROGRAMMER is required")
        endif()

        # Get hex file from target properties
        get_target_property(AVRDUDE_UPLOAD_HEX_FILE ${AVRDUDE_UPLOAD_TARGET} HEX_FILE)

        # Construct avrdude command
        set(_AVRDUDE_ARGS "-p ${AVRDUDE_UPLOAD_MCU} -c ${AVRDUDE_UPLOAD_PROGRAMMER}")
        if(AVRDUDE_UPLOAD_PORT)
            string(APPEND _AVRDUDE_ARGS " -P ${AVRDUDE_UPLOAD_PORT}")
        endif()
        if(AVRDUDE_UPLOAD_BAUDRATE)
            string(APPEND _AVRDUDE_ARGS " -b ${AVRDUDE_UPLOAD_BAUDRATE}")
        endif()
        if(AVRDUDE_UPLOAD_LFUSE)
            string(APPEND _AVRDUDE_ARGS " -U lfuse:w:${AVRDUDE_UPLOAD_LFUSE}:m")
        endif()
        if(AVRDUDE_UPLOAD_HFUSE)
            string(APPEND _AVRDUDE_ARGS " -U hfuse:w:${AVRDUDE_UPLOAD_HFUSE}:m")
        endif()
        if(AVRDUDE_UPLOAD_EFUSE)
            string(APPEND _AVRDUDE_ARGS " -U efuse:w:${AVRDUDE_UPLOAD_EFUSE}:m")
        endif()
        string(APPEND _AVRDUDE_ARGS " -U flash:w:${AVRDUDE_UPLOAD_HEX_FILE}:i")

        add_custom_target(${name}
            ${AVRDUDE_EXECUTABLE} ${_AVRDUDE_ARGS}
            COMMENT "Uploading firmware to ${AVRDUDE_UPLOAD_MCU} via ${AVRDUDE_UPLOAD_PROGRAMMER} on ${AVRDUDE_UPLOAD_PORT}"
            DEPENDS ${AVRDUDE_UPLOAD_INPUT}
        )

        # define target variables
        set(AVRDUDE_${name}_INPUT ${AVRDUDE_UPLOAD_HEX_FILE})
        set(AVRDUDE_${name}_DEFINED TRUE)
        set(AVRDUDE_${name}_MCU ${AVRDUDE_UPLOAD_MCU})
        set(AVRDUDE_${name}_PROGRAMMER ${AVRDUDE_UPLOAD_PROGRAMMER})
        if(AVRDUDE_UPLOAD_PORT)
            set(AVRDUDE_${name}_PORT ${AVRDUDE_UPLOAD_PORT})
        endif()
        if(AVRDUDE_UPLOAD_BAUDRATE)
            set(AVRDUDE_${name}_BAUDRATE ${AVRDUDE_UPLOAD_BAUDRATE})
        endif()
        if(AVRDUDE_UPLOAD_LFUSE)
            set(AVRDUDE_${name}_LFUSE ${AVRDUDE_UPLOAD_LFUSE})
        endif()
        if(AVRDUDE_UPLOAD_HFUSE)
            set(AVRDUDE_${name}_HFUSE ${AVRDUDE_UPLOAD_HFUSE})
        endif()
        if(AVRDUDE_UPLOAD_EFUSE)
            set(AVRDUDE_${name}_EFUSE ${AVRDUDE_UPLOAD_EFUSE})
        endif()

    endmacro()

endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(
    AVRDUDE 
    REQUIRED_VARS AVRDUDE_EXECUTABLE
    VERSION_VAR AVRDUDE_VERSION
)
