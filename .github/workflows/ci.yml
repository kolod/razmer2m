name: CI

on:
  push:
    branches: 
    - main
    - develop
  pull_request:
    branches: 
    - main
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Remove existing CMake
      run: sudo apt-get remove --purge cmake

    - name: Download and install CMake 3.31
      run: |        
        wget https://github.com/Kitware/CMake/releases/download/v3.31.3/cmake-3.31.3-linux-x86_64.tar.gz
        tar -xzf cmake-3.31.3-linux-x86_64.tar.gz
        sudo mv cmake-3.31.3-linux-x86_64 /opt/cmake

    - name: Update package list
      run: sudo apt-get update

    - name: Install Ninja
      run: sudo apt-get install -y ninja-build

    - name: Install GCC
      run: sudo apt-get install -y build-essential gcc g++

    - name: Install AVR-GCC 15.2.0 toolchain
      run: |
        wget https://github.com/ZakKemble/avr-gcc-build/releases/download/v15.2.0-1/avr-gcc-15.2.0-x64-linux.tar.bz2
        tar -xjf avr-gcc-15.2.0-x64-linux.tar.bz2
        sudo mv avr-gcc-15.2.0-x64-linux /opt/avr-gcc

    - name: Install QEMU
      run: sudo apt-get install -y qemu-system-avr

    - name: Add CMAKE & AVR-GCC to PATH
      run: |
        echo "/opt/cmake/bin" >> $GITHUB_PATH
        echo "/opt/avr-gcc/bin" >> $GITHUB_PATH

    - name: Set AVR toolchain environment
      run: echo "AVR_TOOLCHAIN_ROOT=/opt/avr-gcc" >> $GITHUB_ENV

    - name: Print tool versions
      run: |
        echo "=== Tool Versions ==="
        cmake --version
        ninja --version
        gcc --version
        avr-gcc --version
        qemu-system-avr --version
        echo "====================="

    - name: Configure AVR tests
      run: cmake --preset tests-avr

    - name: Build AVR tests
      run: cmake --build --preset tests-avr

    - name: Configure native tests
      run: cmake --preset tests-gcc

    - name: Build native tests
      run: cmake --build --preset tests-gcc

    - name: Run all tests
      working-directory: build/tests-gcc
      run: ctest --verbose

    - name: Configure firmware
      run: cmake --preset firmware

    - name: Build firmware
      run: cmake --build build/firmware

    - name: Store firmware binaries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-hex-files
        path: |
          build/firmware/*.hex
        retention-days: 30
        if-no-files-found: error
