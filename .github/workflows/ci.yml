name: CI

on:
  push:
    branches: 
    - main
    - develop
  pull_request:
    branches: 
    - main
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update package list
      run: sudo apt-get update

    - name: Cache AVR-GCC toolchain
      id: avr-gcc-cache
      uses: actions/cache@v4
      with:
        path: /opt/avr-gcc
        key: avr-gcc-15.2.0-x64-${{ matrix.os }}

    - name: Install AVR-GCC 15.2.0 toolchain on Linux
      if: steps.avr-gcc-cache.outputs.cache-hit != 'true' && matrix.os == 'ubuntu-latest'
      run: |
        wget https://github.com/ZakKemble/avr-gcc-build/releases/download/v15.2.0-1/avr-gcc-15.2.0-x64-linux.tar.bz2
        tar -xjf avr-gcc-15.2.0-x64-linux.tar.bz2
        sudo mv avr-gcc-15.2.0-x64-linux /opt/avr-gcc
        echo "/opt/avr-gcc/bin" >> $GITHUB_PATH

    - name: Install AVR-GCC 15.2.0 toolchain on Windows
      if: steps.avr-gcc-cache.outputs.cache-hit != 'true' && matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -Uri "https://github.com/ZakKemble/avr-gcc-build/releases/download/v15.1.0-1/avr-gcc-15.1.0-x64-windows.zip" -OutFile "avr-gcc.zip"
        Expand-Archive -Path "avr-gcc.zip" -DestinationPath "C:\"
        Rename-Item "C:\avr-gcc-15.1.0-x64-windows" "C:\avr-gcc"
        echo "C:\avr-gcc\bin" >> $GITHUB_PATH

    - name: Print tool versions
      run: |
        echo "=== Tool Versions ==="
        cmake --version
        ninja --version
        gcc --version
        avr-gcc --version
        echo "====================="

    - name: Configure native tests
      run: cmake --preset tests-gcc

    - name: Build native tests
      run: cmake --build --preset tests-gcc

    - name: Run all tests
      working-directory: build/tests-gcc
      run: ctest --verbose
      timeout-minutes: 5

    - name: Save test logs as artifacts if failed
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: build/tests-gcc/Testing/
        retention-days: 7

    - name: Configure firmware
      run: cmake --preset firmware

    - name: Build firmware
      run: cmake --build build/firmware

    - name: Store firmware binaries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: firmware-hex-files-${{ matrix.os }}
        path: build/firmware/*.hex
        retention-days: 30
        if-no-files-found: error
